{"categories":[{"title":"随笔","uri":"https://allen-yangjh.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"posts":[{"content":"主要用于记录自己在项目工作和平时学习的过程中所碰到的Bug或疑难问题，方便回过头来查看复习。 不断更新\u0026hellip;\n JS中 Array 对象常用方法详解:\n concat() 连接两个或个多的数组，并返回结果。传入的可以是具体值、也可以是数组对象。 该方法不改变原数组\nlet arr1 = [1, 2, 3]; let arr2 = [4, 5]; arr1.concat(arr2, 6); // [1, 2, 3, 4, 5, 6]  join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔，如果省略该参数，则默认使用逗号作为分隔符。\nlet arr = [1, 2, 3]; arr.join('|'); // \u0026quot;1|2|3\u0026quot;  pop() 删除并返回数组的最后一个元素，把数组长度减 1。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。\nlet arr = [1, 2, 3]; arr.pop(); // 3  shift() 删除并返回数组的第一个元素。\nlet arr = [1, 2, 3]; arr.shift(); // 1  push() 向数组的末尾添加一个或多个元素，返回新的长度。\npush() 方法和 pop() 方法使用数组提供的先进后出栈的功能。\nlet arr = [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;]; arr.push(\u0026quot;James\u0026quot;); // 3 console.log(arr); // [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;]  unshift() 向数组的开头添加一个或多个元素，返回新的长度。该方法直接修改原数组，将参数插入数组的头部，将已经存在的元素顺次往后移。\nunshift() 方法无法在 Internet Explorer 中正确地工作！\nlet arr = [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;]; arr.unshift(\u0026quot;James\u0026quot;); // 3 console.log(arr); // [\u0026quot;James\u0026quot;, \u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;]  reverse() 颠倒数组中元素的顺序。\n不常用\n slice() 根据下标返回数组中选定的元素。包含start和end两个参数，可以为负数(从数组尾部开始算起)。如果 end 未被规定，会选取从 start 到数组结尾的所有元素。\nlet arr = [\u0026quot;George\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;Thomas\u0026quot;, \u0026quot;James\u0026quot;, \u0026quot;Adrew\u0026quot;]; arr.slice(2); // [\u0026quot;Thomas\u0026quot;, \u0026quot;James\u0026quot;, \u0026quot;Adrew\u0026quot;] arr.slice(2, 4); // [\u0026quot;Thomas\u0026quot;, \u0026quot;James\u0026quot;]  splice() 向数组指定位置删除或添加元素，返回被删除项目的新数组。删除的元素个数可以跟替换的元素个数不相等。\nlet arr = [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;]; // 1.添加1个元素 arr.splice(1, 0, \u0026quot;William\u0026quot;); // [] 如果没有删除元素则返回空 console.log(arr); // [\u0026quot;Bob\u0026quot;, \u0026quot;William\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;] // 2.删除1个元素 arr = [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;]; arr.splice(1, 1); // [\u0026quot;John\u0026quot;] console.log(arr); // [\u0026quot;Bob\u0026quot;, \u0026quot;James\u0026quot;] // 3.删除2个元素 添加1个元素来替换 arr = [\u0026quot;Bob\u0026quot;, \u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;]; arr.splice(1, 2, \u0026quot;William\u0026quot;); // [\u0026quot;John\u0026quot;, \u0026quot;James\u0026quot;] console.log(arr); // [\u0026quot;Bob\u0026quot;, \u0026quot;William\u0026quot;]  sort() 对数组的元素进行排序。传入的必须是函数，如果没有传入参数，将按照[^内置算法]对元素进行排序。 该方法在原数组上进行排序\n[^内置算法]: JS中sort实现的算法是O(n^2)的冒泡排序，并会将每一项通过toString()转型，即将每一项转化为ASCII进行比较。\n如果想按照其他标准进行排序，就需要提供比较函数，该函数应该具有两个参数 a 和 b，其返回值如下：\n 若 a 小于 b，则返回一个小于0的值。在排序后的数组中 a 将出现在 b 之前 若 a 等于 b，则返回0。 若 a 大于 b，则返回一个大于0的值。\nlet arr = [10, 5, 40, 25, 100, 1]; // 内置算法会将数组中的每一项转化为ASCII进行比较，所以排序顺序有误。 arr.sort(); // [1, 10, 25, 40, 5] // 常见的比较函数有： // 1.按照数值大小升序排序 arr.sort(function(a,b){ return a - b; })； // [1, 5, 10, 25, 40, 100] // 2.按照数值大小降序排序 arr.sort(function(a,b){ return b - a; }); // [100, 40, 25, 10, 5, 1] // 3.按照对象的某一属性值排序 arr = [ {name: \u0026quot;Bob\u0026quot;, age: 13}, {name: \u0026quot;John\u0026quot;, age: 22}, {name: \u0026quot;James\u0026quot;, age: 7} ]; arr.sort(function(a, b){ var value1 = a.age; var value2 = b.age; return value1 - value2; }); // 4.打乱数组 arr.sort(function(a,b){ return Math.random() - 0.5; })    ","id":0,"section":"posts","summary":"\u003cp\u003e主要用于记录自己在项目工作和平时学习的过程中所碰到的Bug或疑难问题，方便回过头来查看复习。\n\u003cem\u003e不断更新\u0026hellip;\u003c/em\u003e\u003c/p\u003e","tags":null,"title":"Essay","uri":"https://allen-yangjh.github.io/2019/12/essay/","year":"2019"}],"tags":[]}